# CircleCI v2 Config
version: 2.1

######################################################################
#### This is modified circleCI pipeline for testing this demo project.
#### Need to replace with proper one when it goes to MVP phase.
#### Just delete this file add a standard one because this file is
#### modified all over the place for testing purposes.
######################################################################


##
# orbs
#
# Orbs used in this pipeline
##
orbs:
  slack: circleci/slack@4.9.3 # Ref: https://github.com/mojaloop/ci-config/tree/master/slack-templates
  pr-tools: mojaloop/pr-tools@0.1.10 # Ref: https://github.com/mojaloop/ci-config/
  gh: circleci/github-cli@2.1.0
  anchore: anchore/anchore-engine@1.9.0

##
# defaults
#
# YAML defaults templates, in alphabetical order
##
defaults_Dependencies: &defaults_Dependencies |
  apk --no-cache add bash
  apk --no-cache add git
  apk --no-cache add ca-certificates
  apk --no-cache add curl
  apk --no-cache add openssh-client
  apk add --no-cache -t build-dependencies make gcc g++ python3 libtool autoconf automake jq
  apk add --no-cache -t openssl ncurses coreutils libgcc linux-headers grep util-linux binutils findutils
  npm config set unsafe-perm true
  npm install -g node-gyp

defaults_awsCliDependencies: &defaults_awsCliDependencies |
    apk --no-cache add aws-cli

defaults_license_scanner: &defaults_license_scanner
  name: Install and set up license-scanner
  command: |
    git clone https://github.com/mojaloop/license-scanner /tmp/license-scanner
    cd /tmp/license-scanner && make build default-files set-up

defaults_export_version_from_package: &defaults_export_version_from_package
  name: Format the changelog into the github release body and get release tag
  command: |
    git diff --no-indent-heuristic master~1 HEAD CHANGELOG.md | sed -n '/^+[^+]/ s/^+//p' > /tmp/changes
    echo 'export RELEASE_CHANGES=`cat /tmp/changes`' >> $BASH_ENV
    echo 'export RELEASE_TAG=`cat package-lock.json | jq -r .version`' >> $BASH_ENV

defaults_configure_git: &defaults_configure_git
  name: Configure git
  command: |
    git config user.email ${GIT_CI_EMAIL}
    git config user.name ${GIT_CI_USER}

defaults_configure_nvm: &defaults_configure_nvm
  name: Configure NVM
  command: |
    touch $HOME/.profile
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    echo "Installing Node version: $(cat .nvmrc)"
    nvm install $(cat .nvmrc)
    nvm alias default $(cat .nvmrc)
    nvm use $(cat .nvmrc)

##
# Executors
#
# CircleCI Executors
##
executors:
  default-docker:
    working_directory: &WORKING_DIR /home/circleci/project
    docker:
      - image: node:16.15.0-alpine # Ref: https://hub.docker.com/_/node?tab=tags&page=1&name=alpine

  default-machine:
    working_directory: *WORKING_DIR
    machine:
      image: ubuntu-2004:current # Ref: https://circleci.com/developer/machine/image/ubuntu-2004

##
# Jobs
#
# A map of CircleCI jobs
##
jobs:
  setup:
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - run:
          <<: *defaults_configure_nvm
      - run:
          name: Update NPM install
          command: npm ci
      - save_cache:
          key: dependency-cache-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - node_modules

  build-local:
    executor: default-machine
    steps:
      - checkout
      - run:
          name: Build Docker local image
          command: |
            echo "Building Docker image: local"
            docker build -t $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:local .
      - run:
          name: Save docker image to workspace
          command: docker save -o /tmp/docker-image-local.tar $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:local
      - persist_to_workspace:
          root: /tmp
          paths:
            - ./docker-image-local.tar

  test-functional:
    executor: default-machine
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: Load the pre-built docker local image from workspace
          command: docker load -i /tmp/docker-image-local.tar
      - run:
          name: Start docker-compose for this service and TTK
          command: |
            cd test/func
            docker-compose up -d
      - run:
          name: Wait for some time
          command: |
            sleep 10
      - run:
          name: Execute Functional Tests
          command: |
            cd test/func
            docker-compose -f ./ttk-tests-docker-compose.yml up --abort-on-container-exit
            docker compose down
      - store_artifacts:
          path: ./test/func/reports
          prefix: test

  test-dependencies:
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - run:
          <<: *defaults_configure_nvm
      - restore_cache:
          key: dependency-cache-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Execute dependency tests
          command: npm run dep:check

  test-lint:
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - run:
          <<: *defaults_configure_nvm
      - restore_cache:
          key: dependency-cache-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Execute lint tests
          command: npm run lint

  release:
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - run:
          <<: *defaults_configure_nvm
      - restore_cache:
          keys:
          - dependency-cache-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          <<: *defaults_configure_git
      - run:
          name: Generate changelog and bump package version
          command: npm run release -- --no-verify
      - run:
          name: Push the release
          command: git push --follow-tags origin ${CIRCLE_BRANCH}

  github-release:
    executor: default-machine
    steps:
      - run:
          name: Install git
          command: |
            sudo apt-get update && sudo apt-get install -y git
      - gh/install
      - checkout
      - run:
          <<: *defaults_configure_git
      - run:
          name: Fetch updated release branch
          command: |
            git fetch origin
            git checkout origin/${CIRCLE_BRANCH}
      - run:
          <<: *defaults_export_version_from_package
      - run:
          name: Check the release changes
          command: |
            echo "Changes are: ${RELEASE_CHANGES}"
      - run:
          name: Create Release
          command: |
            gh release create "v${RELEASE_TAG}" --title "v${RELEASE_TAG} Release" --draft=false --notes "${RELEASE_CHANGES}" ./CHANGELOG.md

  publish:
    executor: default-machine
    steps:
      - checkout
      - run:
          name: Setup for LATEST release
          command: |
            echo "export RELEASE_TAG=$RELEASE_TAG_PROD" >> $BASH_ENV
            echo "RELEASE_TAG=$RELEASE_TAG_PROD"

            PACKAGE_VERSION=$(cat package-lock.json | jq -r .version)
            echo "export PACKAGE_VERSION=${PACKAGE_VERSION}" >> $BASH_ENV
            echo "PACKAGE_VERSION=${PACKAGE_VERSION}"
      - attach_workspace:
          at: /tmp
      - run:
          name: Load the pre-built docker image from workspace
          command: | 
            docker load -i /tmp/docker-image-local.tar
      - run:
          name: Login to Docker Hub
          command: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run:
          name: Re-tag pre built image
          command: |
            docker tag $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:local $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG
            docker tag $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:local $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$RELEASE_TAG
      - run:
          name: Publish Docker image $CIRCLE_TAG & Latest tag to Docker Hub
          command: |
            echo "Publishing $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG"
            docker push $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG
            echo "Publishing $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$RELEASE_TAG"
            docker push $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$RELEASE_TAG

  publish-snapshot:
    executor: default-machine
    steps:
      - checkout
      - run:
          name: Setup for SNAPSHOT release
          command: |
            echo "export RELEASE_TAG=$RELEASE_TAG_SNAPSHOT" >> $BASH_ENV
            echo "RELEASE_TAG=$RELEASE_TAG_SNAPSHOT"

            PACKAGE_VERSION=$(cat package-lock.json | jq -r .version)
            echo "export PACKAGE_VERSION=${PACKAGE_VERSION}" >> $BASH_ENV
            echo "PACKAGE_VERSION=${PACKAGE_VERSION}"
      - attach_workspace:
          at: /tmp
      - run:
          name: Load the pre-built docker image from workspace
          command: | 
            docker load -i /tmp/docker-image-local.tar
      - run:
          name: Login to Docker Hub
          command: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run:
          name: Re-tag pre built image
          command: |
            docker tag $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:local $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG
            docker tag $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:local $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$RELEASE_TAG
      - run:
          name: Publish Docker image $CIRCLE_TAG & Latest tag to Docker Hub
          command: |
            echo "Publishing $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG"
            docker push $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG
            echo "Publishing $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$RELEASE_TAG"
            docker push $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$RELEASE_TAG


##
# Workflows
#
# CircleCI Workflow config
##
workflows:
  version: 2
  build_and_test:
    jobs:
      - pr-tools/pr-title-check:
          context: org-global
      - setup:
          context: org-global
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - build-local:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - test-dependencies:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - test-lint:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/

      - test-functional:
          context: org-global
          requires:
            - setup
            - build-local
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/

      # New commits to master release automatically
      - release:
          context: org-global
          requires:
            - pr-tools/pr-title-check
            - test-dependencies
            - test-lint
            - test-functional
          filters:
            branches:
              only:
                - master
                - /release\/v.*/
      - github-release:
          context: org-global
          requires:
            - release
          filters:
            branches:
              only:
                - master
                - /release\/v.*/
      - publish:
          context: org-global
          requires:
            - pr-tools/pr-title-check
            - test-dependencies
            - test-lint
            - test-functional
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
            branches:
              ignore:
                - /.*/
      - publish-snapshot:
          context: org-global
          requires:
            - pr-tools/pr-title-check
            - test-dependencies
            - test-lint
            - test-functional
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*\-snapshot+((\.[0-9]+)?)/
            branches:
              ignore:
                - /.*/